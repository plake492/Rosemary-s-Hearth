/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SuperSecretRouteRouteImport } from './routes/superSecretRoute'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as DashboardRouteImport } from './routes/_dashboard'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AppIndexRouteImport } from './routes/_app/index'
import { Route as DashboardMediaRouteImport } from './routes/_dashboard/media'
import { Route as DashboardAdminDashRouteImport } from './routes/_dashboard/admin-dash'
import { Route as AppMenuRouteImport } from './routes/_app/menu'

const SuperSecretRouteRoute = SuperSecretRouteRouteImport.update({
  id: '/superSecretRoute',
  path: '/superSecretRoute',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/_dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AppIndexRoute = AppIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRoute,
} as any)
const DashboardMediaRoute = DashboardMediaRouteImport.update({
  id: '/media',
  path: '/media',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardAdminDashRoute = DashboardAdminDashRouteImport.update({
  id: '/admin-dash',
  path: '/admin-dash',
  getParentRoute: () => DashboardRoute,
} as any)
const AppMenuRoute = AppMenuRouteImport.update({
  id: '/menu',
  path: '/menu',
  getParentRoute: () => AppRoute,
} as any)

export interface FileRoutesByFullPath {
  '/admin': typeof AdminRoute
  '/superSecretRoute': typeof SuperSecretRouteRoute
  '/menu': typeof AppMenuRoute
  '/admin-dash': typeof DashboardAdminDashRoute
  '/media': typeof DashboardMediaRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesByTo {
  '/admin': typeof AdminRoute
  '/superSecretRoute': typeof SuperSecretRouteRoute
  '/menu': typeof AppMenuRoute
  '/admin-dash': typeof DashboardAdminDashRoute
  '/media': typeof DashboardMediaRoute
  '/': typeof AppIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_dashboard': typeof DashboardRouteWithChildren
  '/admin': typeof AdminRoute
  '/superSecretRoute': typeof SuperSecretRouteRoute
  '/_app/menu': typeof AppMenuRoute
  '/_dashboard/admin-dash': typeof DashboardAdminDashRoute
  '/_dashboard/media': typeof DashboardMediaRoute
  '/_app/': typeof AppIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/admin'
    | '/superSecretRoute'
    | '/menu'
    | '/admin-dash'
    | '/media'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/admin' | '/superSecretRoute' | '/menu' | '/admin-dash' | '/media' | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_dashboard'
    | '/admin'
    | '/superSecretRoute'
    | '/_app/menu'
    | '/_dashboard/admin-dash'
    | '/_dashboard/media'
    | '/_app/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  DashboardRoute: typeof DashboardRouteWithChildren
  AdminRoute: typeof AdminRoute
  SuperSecretRouteRoute: typeof SuperSecretRouteRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/superSecretRoute': {
      id: '/superSecretRoute'
      path: '/superSecretRoute'
      fullPath: '/superSecretRoute'
      preLoaderRoute: typeof SuperSecretRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_dashboard': {
      id: '/_dashboard'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app/': {
      id: '/_app/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppIndexRouteImport
      parentRoute: typeof AppRoute
    }
    '/_dashboard/media': {
      id: '/_dashboard/media'
      path: '/media'
      fullPath: '/media'
      preLoaderRoute: typeof DashboardMediaRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_dashboard/admin-dash': {
      id: '/_dashboard/admin-dash'
      path: '/admin-dash'
      fullPath: '/admin-dash'
      preLoaderRoute: typeof DashboardAdminDashRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/_app/menu': {
      id: '/_app/menu'
      path: '/menu'
      fullPath: '/menu'
      preLoaderRoute: typeof AppMenuRouteImport
      parentRoute: typeof AppRoute
    }
  }
}

interface AppRouteChildren {
  AppMenuRoute: typeof AppMenuRoute
  AppIndexRoute: typeof AppIndexRoute
}

const AppRouteChildren: AppRouteChildren = {
  AppMenuRoute: AppMenuRoute,
  AppIndexRoute: AppIndexRoute,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface DashboardRouteChildren {
  DashboardAdminDashRoute: typeof DashboardAdminDashRoute
  DashboardMediaRoute: typeof DashboardMediaRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardAdminDashRoute: DashboardAdminDashRoute,
  DashboardMediaRoute: DashboardMediaRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  DashboardRoute: DashboardRouteWithChildren,
  AdminRoute: AdminRoute,
  SuperSecretRouteRoute: SuperSecretRouteRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
